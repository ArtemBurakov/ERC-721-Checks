// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package checks

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ChecksMetaData contains all meta data concerning the Checks contract.
var ChecksMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"_mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801562000010575f80fd5b506040518060400160405280600681526020017f436865636b7300000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f5043540000000000000000000000000000000000000000000000000000000000815250815f90816200008d9190620005c1565b5080600190816200009f9190620005c1565b505050620000b65f801b33620000ee60201b60201c565b620000e87f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633620000ee60201b60201c565b620006a5565b6200010082826200010460201b60201c565b5050565b6200011682826200014060201b60201c565b6200013b8160085f8581526020019081526020015f206200022c60201b90919060201c565b505050565b6200015282826200026160201b60201c565b6200022857600160075f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550620001cd620002c560201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b5f62000259835f018373ffffffffffffffffffffffffffffffffffffffff165f1b620002cc60201b60201c565b905092915050565b5f60075f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f33905090565b5f620002df83836200033d60201b60201c565b6200033357825f0182908060018154018082558091505060019003905f5260205f20015f9091909190915055825f0180549050836001015f8481526020019081526020015f20819055506001905062000337565b5f90505b92915050565b5f80836001015f8481526020019081526020015f20541415905092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680620003d957607f821691505b602082108103620003ef57620003ee62000394565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620004537fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000416565b6200045f868362000416565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620004a9620004a36200049d8462000477565b62000480565b62000477565b9050919050565b5f819050919050565b620004c48362000489565b620004dc620004d382620004b0565b84845462000422565b825550505050565b5f90565b620004f2620004e4565b620004ff818484620004b9565b505050565b5b8181101562000526576200051a5f82620004e8565b60018101905062000505565b5050565b601f82111562000575576200053f81620003f5565b6200054a8462000407565b810160208510156200055a578190505b62000572620005698562000407565b83018262000504565b50505b505050565b5f82821c905092915050565b5f620005975f19846008026200057a565b1980831691505092915050565b5f620005b1838362000586565b9150826002028217905092915050565b620005cc826200035d565b67ffffffffffffffff811115620005e857620005e762000367565b5b620005f48254620003c1565b620006018282856200052a565b5f60209050601f83116001811462000637575f841562000622578287015190505b6200062e8582620005a4565b8655506200069d565b601f1984166200064786620003f5565b5f5b82811015620006705784890151825560018201915060208501945060208101905062000649565b868310156200069057848901516200068c601f89168262000586565b8355505b6001600288020188555050505b505050505050565b613fec80620006b35f395ff3fe608060405234801561000f575f80fd5b5060043610610171575f3560e01c806370a08231116100dc578063b88d4fde11610095578063d53913931161006f578063d53913931461047b578063d547741f14610499578063e985e9c5146104b5578063fca3b5aa146104e557610171565b8063b88d4fde146103ff578063c87b56dd1461041b578063ca15c8731461044b57610171565b806370a08231146103175780639010d07c1461034757806391d148541461037757806395d89b41146103a7578063a217fddf146103c5578063a22cb465146103e357610171565b8063248a9ca31161012e578063248a9ca3146102475780632f2ff15d146102775780633092afd51461029357806336568abe146102af57806342842e0e146102cb5780636352211e146102e757610171565b806301ffc9a71461017557806306fdde03146101a5578063081812fc146101c3578063095ea7b3146101f357806310e6d7461461020f57806323b872dd1461022b575b5f80fd5b61018f600480360381019061018a91906128b5565b610501565b60405161019c91906128fa565b60405180910390f35b6101ad610512565b6040516101ba919061299d565b60405180910390f35b6101dd60048036038101906101d891906129f0565b6105a1565b6040516101ea9190612a5a565b60405180910390f35b61020d60048036038101906102089190612a9d565b6105e3565b005b61022960048036038101906102249190612c07565b6106f9565b005b61024560048036038101906102409190612c61565b6108b1565b005b610261600480360381019061025c9190612ce4565b610911565b60405161026e9190612d1e565b60405180910390f35b610291600480360381019061028c9190612d37565b61092e565b005b6102ad60048036038101906102a89190612d75565b61094f565b005b6102c960048036038101906102c49190612d37565b610a35565b005b6102e560048036038101906102e09190612c61565b610ab8565b005b61030160048036038101906102fc91906129f0565b610ad7565b60405161030e9190612a5a565b60405180910390f35b610331600480360381019061032c9190612d75565b610b5b565b60405161033e9190612daf565b60405180910390f35b610361600480360381019061035c9190612dc8565b610c0f565b60405161036e9190612a5a565b60405180910390f35b610391600480360381019061038c9190612d37565b610c3b565b60405161039e91906128fa565b60405180910390f35b6103af610c9f565b6040516103bc919061299d565b60405180910390f35b6103cd610d2f565b6040516103da9190612d1e565b60405180910390f35b6103fd60048036038101906103f89190612e30565b610d35565b005b61041960048036038101906104149190612f0c565b610d4b565b005b610435600480360381019061043091906129f0565b610dad565b604051610442919061299d565b60405180910390f35b61046560048036038101906104609190612ce4565b610dbf565b6040516104729190612daf565b60405180910390f35b610483610de0565b6040516104909190612d1e565b60405180910390f35b6104b360048036038101906104ae9190612d37565b610e04565b005b6104cf60048036038101906104ca9190612f8c565b610e25565b6040516104dc91906128fa565b60405180910390f35b6104ff60048036038101906104fa9190612d75565b610eb3565b005b5f61050b82610f99565b9050919050565b60605f805461052090612ff7565b80601f016020809104026020016040519081016040528092919081815260200182805461054c90612ff7565b80156105975780601f1061056e57610100808354040283529160200191610597565b820191905f5260205f20905b81548152906001019060200180831161057a57829003601f168201915b5050505050905090565b5f6105ab82611012565b60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f6105ed82610ad7565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361065d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065490613097565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661067c61105d565b73ffffffffffffffffffffffffffffffffffffffff1614806106ab57506106aa816106a561105d565b610e25565b5b6106ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e190613125565b60405180910390fd5b6106f48383611064565b505050565b6107237f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633610c3b565b610762576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107599061318d565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c7906131f5565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361083e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083590613283565b60405180910390fd5b5f815111610881576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610878906132eb565b60405180910390fd5b5f61088c600961111a565b90506108986009611126565b6108a2838261113a565b6108ac8183611157565b505050565b6108c26108bc61105d565b826111c2565b610901576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f890613379565b60405180910390fd5b61090c838383611256565b505050565b5f60075f8381526020019081526020015f20600101549050919050565b61093782610911565b61094081611542565b61094a8383611556565b505050565b61095b5f801b33610c3b565b61099a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610991906133e1565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ff90613449565b60405180910390fd5b610a327f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a682610e04565b50565b610a3d61105d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610aaa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa1906134d7565b60405180910390fd5b610ab48282611588565b5050565b610ad283838360405180602001604052805f815250610d4b565b505050565b5f80610ae2836115ba565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b499061353f565b60405180910390fd5b80915050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc1906135cd565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b5f610c338260085f8681526020019081526020015f206115f390919063ffffffff16565b905092915050565b5f60075f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b606060018054610cae90612ff7565b80601f0160208091040260200160405190810160405280929190818152602001828054610cda90612ff7565b8015610d255780601f10610cfc57610100808354040283529160200191610d25565b820191905f5260205f20905b815481529060010190602001808311610d0857829003601f168201915b5050505050905090565b5f801b81565b610d47610d4061105d565b838361160a565b5050565b610d5c610d5661105d565b836111c2565b610d9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9290613379565b60405180910390fd5b610da784848484611771565b50505050565b6060610db8826117cd565b9050919050565b5f610dd960085f8481526020019081526020015f206118d7565b9050919050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b610e0d82610911565b610e1681611542565b610e208383611588565b505050565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b610ebf5f801b33610c3b565b610efe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef5906133e1565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6390613449565b60405180910390fd5b610f967f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68261092e565b50565b5f7f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061100b575061100a826118ea565b5b9050919050565b61101b81611963565b61105a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110519061353f565b60405180910390fd5b50565b5f33905090565b8160045f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166110d483610ad7565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b5f815f01549050919050565b6001815f015f828254019250508190555050565b611153828260405180602001604052805f8152506119a3565b5050565b61116082611963565b61119f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111969061365b565b60405180910390fd5b8060065f8481526020019081526020015f2090816111bd9190613816565b505050565b5f806111cd83610ad7565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061120f575061120e8185610e25565b5b8061124d57508373ffffffffffffffffffffffffffffffffffffffff16611235846105a1565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661127682610ad7565b73ffffffffffffffffffffffffffffffffffffffff16146112cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c390613955565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361133a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611331906139e3565b60405180910390fd5b61134783838360016119fd565b8273ffffffffffffffffffffffffffffffffffffffff1661136782610ad7565b73ffffffffffffffffffffffffffffffffffffffff16146113bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b490613955565b60405180910390fd5b60045f8281526020019081526020015f205f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600160035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282540392505081905550600160035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508160025f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461153d8383836001611a03565b505050565b6115538161154e61105d565b611a09565b50565b6115608282611a8d565b6115838160085f8581526020019081526020015f20611b6890919063ffffffff16565b505050565b6115928282611b95565b6115b58160085f8581526020019081526020015f20611c7090919063ffffffff16565b505050565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f611600835f0183611c9d565b5f1c905092915050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166f90613a4b565b60405180910390fd5b8060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161176491906128fa565b60405180910390a3505050565b61177c848484611256565b61178884848484611cc4565b6117c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117be90613ad9565b60405180910390fd5b50505050565b60606117d882611012565b5f60065f8481526020019081526020015f2080546117f590612ff7565b80601f016020809104026020016040519081016040528092919081815260200182805461182190612ff7565b801561186c5780601f106118435761010080835404028352916020019161186c565b820191905f5260205f20905b81548152906001019060200180831161184f57829003601f168201915b505050505090505f61187c611e46565b90505f8151036118905781925050506118d2565b5f825111156118c45780826040516020016118ac929190613b31565b604051602081830303815290604052925050506118d2565b6118cd84611e5c565b925050505b919050565b5f6118e3825f01611ec1565b9050919050565b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061195c575061195b82611ed0565b5b9050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff16611984836115ba565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6119ad8383611fb1565b6119b95f848484611cc4565b6119f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ef90613ad9565b60405180910390fd5b505050565b50505050565b50505050565b611a138282610c3b565b611a8957611a20816121c4565b611a2d835f1c60206121f1565b604051602001611a3e929190613be8565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a80919061299d565b60405180910390fd5b5050565b611a978282610c3b565b611b6457600160075f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611b0961105d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b5f611b8d835f018373ffffffffffffffffffffffffffffffffffffffff165f1b612426565b905092915050565b611b9f8282610c3b565b15611c6c575f60075f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611c1161105d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b5f611c95835f018373ffffffffffffffffffffffffffffffffffffffff165f1b61248d565b905092915050565b5f825f018281548110611cb357611cb2613c21565b5b905f5260205f200154905092915050565b5f611ce48473ffffffffffffffffffffffffffffffffffffffff16612589565b15611e39578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611d0d61105d565b8786866040518563ffffffff1660e01b8152600401611d2f9493929190613ca0565b6020604051808303815f875af1925050508015611d6a57506040513d601f19601f82011682018060405250810190611d679190613cfe565b60015b611de9573d805f8114611d98576040519150601f19603f3d011682016040523d82523d5f602084013e611d9d565b606091505b505f815103611de1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd890613ad9565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611e3e565b600190505b949350505050565b606060405180602001604052805f815250905090565b6060611e6782611012565b5f611e70611e46565b90505f815111611e8e5760405180602001604052805f815250611eb9565b80611e98846125ab565b604051602001611ea9929190613b31565b6040516020818303038152906040525b915050919050565b5f815f01805490509050919050565b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611f9a57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611faa5750611fa982612675565b5b9050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361201f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201690613d73565b60405180910390fd5b61202881611963565b15612068576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205f90613ddb565b60405180910390fd5b6120755f838360016119fd565b61207e81611963565b156120be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b590613ddb565b60405180910390fd5b600160035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508160025f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46121c05f83836001611a03565b5050565b60606121ea8273ffffffffffffffffffffffffffffffffffffffff16601460ff166121f1565b9050919050565b60605f60028360026122039190613e26565b61220d9190613e67565b67ffffffffffffffff81111561222657612225612ae3565b5b6040519080825280601f01601f1916602001820160405280156122585781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000815f8151811061228f5761228e613c21565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106122f2576122f1613c21565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053505f60018460026123309190613e26565b61233a9190613e67565b90505b60018111156123d9577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061237c5761237b613c21565b5b1a60f81b82828151811061239357612392613c21565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600485901c9450806123d290613e9a565b905061233d565b505f841461241c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161241390613f0b565b60405180910390fd5b8091505092915050565b5f61243183836126de565b61248357825f0182908060018154018082558091505060019003905f5260205f20015f9091909190915055825f0180549050836001015f8481526020019081526020015f208190555060019050612487565b5f90505b92915050565b5f80836001015f8481526020019081526020015f205490505f811461257e575f6001826124ba9190613f29565b90505f6001865f01805490506124d09190613f29565b9050818114612536575f865f0182815481106124ef576124ee613c21565b5b905f5260205f200154905080875f0184815481106125105761250f613c21565b5b905f5260205f20018190555083876001015f8381526020019081526020015f2081905550505b855f0180548061254957612548613f5c565b5b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f905560019350505050612583565b5f9150505b92915050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60605f60016125b9846126fe565b0190505f8167ffffffffffffffff8111156125d7576125d6612ae3565b5b6040519080825280601f01601f1916602001820160405280156126095781602001600182028036833780820191505090505b5090505f82602001820190505b60011561266a578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161265f5761265e613f89565b5b0494505f8503612616575b819350505050919050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f80836001015f8481526020019081526020015f20541415905092915050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061275a577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816127505761274f613f89565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612797576d04ee2d6d415b85acef8100000000838161278d5761278c613f89565b5b0492506020810190505b662386f26fc1000083106127c657662386f26fc1000083816127bc576127bb613f89565b5b0492506010810190505b6305f5e10083106127ef576305f5e10083816127e5576127e4613f89565b5b0492506008810190505b612710831061281457612710838161280a57612809613f89565b5b0492506004810190505b60648310612837576064838161282d5761282c613f89565b5b0492506002810190505b600a8310612846576001810190505b80915050919050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61289481612860565b811461289e575f80fd5b50565b5f813590506128af8161288b565b92915050565b5f602082840312156128ca576128c9612858565b5b5f6128d7848285016128a1565b91505092915050565b5f8115159050919050565b6128f4816128e0565b82525050565b5f60208201905061290d5f8301846128eb565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561294a57808201518184015260208101905061292f565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61296f82612913565b612979818561291d565b935061298981856020860161292d565b61299281612955565b840191505092915050565b5f6020820190508181035f8301526129b58184612965565b905092915050565b5f819050919050565b6129cf816129bd565b81146129d9575f80fd5b50565b5f813590506129ea816129c6565b92915050565b5f60208284031215612a0557612a04612858565b5b5f612a12848285016129dc565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612a4482612a1b565b9050919050565b612a5481612a3a565b82525050565b5f602082019050612a6d5f830184612a4b565b92915050565b612a7c81612a3a565b8114612a86575f80fd5b50565b5f81359050612a9781612a73565b92915050565b5f8060408385031215612ab357612ab2612858565b5b5f612ac085828601612a89565b9250506020612ad1858286016129dc565b9150509250929050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612b1982612955565b810181811067ffffffffffffffff82111715612b3857612b37612ae3565b5b80604052505050565b5f612b4a61284f565b9050612b568282612b10565b919050565b5f67ffffffffffffffff821115612b7557612b74612ae3565b5b612b7e82612955565b9050602081019050919050565b828183375f83830152505050565b5f612bab612ba684612b5b565b612b41565b905082815260208101848484011115612bc757612bc6612adf565b5b612bd2848285612b8b565b509392505050565b5f82601f830112612bee57612bed612adb565b5b8135612bfe848260208601612b99565b91505092915050565b5f8060408385031215612c1d57612c1c612858565b5b5f612c2a85828601612a89565b925050602083013567ffffffffffffffff811115612c4b57612c4a61285c565b5b612c5785828601612bda565b9150509250929050565b5f805f60608486031215612c7857612c77612858565b5b5f612c8586828701612a89565b9350506020612c9686828701612a89565b9250506040612ca7868287016129dc565b9150509250925092565b5f819050919050565b612cc381612cb1565b8114612ccd575f80fd5b50565b5f81359050612cde81612cba565b92915050565b5f60208284031215612cf957612cf8612858565b5b5f612d0684828501612cd0565b91505092915050565b612d1881612cb1565b82525050565b5f602082019050612d315f830184612d0f565b92915050565b5f8060408385031215612d4d57612d4c612858565b5b5f612d5a85828601612cd0565b9250506020612d6b85828601612a89565b9150509250929050565b5f60208284031215612d8a57612d89612858565b5b5f612d9784828501612a89565b91505092915050565b612da9816129bd565b82525050565b5f602082019050612dc25f830184612da0565b92915050565b5f8060408385031215612dde57612ddd612858565b5b5f612deb85828601612cd0565b9250506020612dfc858286016129dc565b9150509250929050565b612e0f816128e0565b8114612e19575f80fd5b50565b5f81359050612e2a81612e06565b92915050565b5f8060408385031215612e4657612e45612858565b5b5f612e5385828601612a89565b9250506020612e6485828601612e1c565b9150509250929050565b5f67ffffffffffffffff821115612e8857612e87612ae3565b5b612e9182612955565b9050602081019050919050565b5f612eb0612eab84612e6e565b612b41565b905082815260208101848484011115612ecc57612ecb612adf565b5b612ed7848285612b8b565b509392505050565b5f82601f830112612ef357612ef2612adb565b5b8135612f03848260208601612e9e565b91505092915050565b5f805f8060808587031215612f2457612f23612858565b5b5f612f3187828801612a89565b9450506020612f4287828801612a89565b9350506040612f53878288016129dc565b925050606085013567ffffffffffffffff811115612f7457612f7361285c565b5b612f8087828801612edf565b91505092959194509250565b5f8060408385031215612fa257612fa1612858565b5b5f612faf85828601612a89565b9250506020612fc085828601612a89565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061300e57607f821691505b60208210810361302157613020612fca565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e655f8201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b5f61308160218361291d565b915061308c82613027565b604082019050919050565b5f6020820190508181035f8301526130ae81613075565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f5f8201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b5f61310f603d8361291d565b915061311a826130b5565b604082019050919050565b5f6020820190508181035f83015261313c81613103565b9050919050565b7f43616c6c6572206973206e6f742061206d696e746572000000000000000000005f82015250565b5f61317760168361291d565b915061318282613143565b602082019050919050565b5f6020820190508181035f8301526131a48161316b565b9050919050565b7f496e76616c696420726563697069656e742061646472657373000000000000005f82015250565b5f6131df60198361291d565b91506131ea826131ab565b602082019050919050565b5f6020820190508181035f83015261320c816131d3565b9050919050565b7f43616e6e6f74206d696e7420746f2074686520636f6e747261637420697473655f8201527f6c66000000000000000000000000000000000000000000000000000000000000602082015250565b5f61326d60228361291d565b915061327882613213565b604082019050919050565b5f6020820190508181035f83015261329a81613261565b9050919050565b7f5552492063616e6e6f7420626520656d707479000000000000000000000000005f82015250565b5f6132d560138361291d565b91506132e0826132a1565b602082019050919050565b5f6020820190508181035f830152613302816132c9565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e655f8201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b5f613363602d8361291d565b915061336e82613309565b604082019050919050565b5f6020820190508181035f83015261339081613357565b9050919050565b7f43616c6c6572206973206e6f7420616e2061646d696e000000000000000000005f82015250565b5f6133cb60168361291d565b91506133d682613397565b602082019050919050565b5f6020820190508181035f8301526133f8816133bf565b9050919050565b7f496e76616c6964206d696e7465722061646472657373000000000000000000005f82015250565b5f61343360168361291d565b915061343e826133ff565b602082019050919050565b5f6020820190508181035f83015261346081613427565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e63655f8201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b5f6134c1602f8361291d565b91506134cc82613467565b604082019050919050565b5f6020820190508181035f8301526134ee816134b5565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e20494400000000000000005f82015250565b5f61352960188361291d565b9150613534826134f5565b602082019050919050565b5f6020820190508181035f8301526135568161351d565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f7420612076615f8201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b5f6135b760298361291d565b91506135c28261355d565b604082019050919050565b5f6020820190508181035f8301526135e4816135ab565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e5f8201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b5f613645602e8361291d565b9150613650826135eb565b604082019050919050565b5f6020820190508181035f83015261367281613639565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026136d57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261369a565b6136df868361369a565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61371a613715613710846129bd565b6136f7565b6129bd565b9050919050565b5f819050919050565b61373383613700565b61374761373f82613721565b8484546136a6565b825550505050565b5f90565b61375b61374f565b61376681848461372a565b505050565b5b818110156137895761377e5f82613753565b60018101905061376c565b5050565b601f8211156137ce5761379f81613679565b6137a88461368b565b810160208510156137b7578190505b6137cb6137c38561368b565b83018261376b565b50505b505050565b5f82821c905092915050565b5f6137ee5f19846008026137d3565b1980831691505092915050565b5f61380683836137df565b9150826002028217905092915050565b61381f82612913565b67ffffffffffffffff81111561383857613837612ae3565b5b6138428254612ff7565b61384d82828561378d565b5f60209050601f83116001811461387e575f841561386c578287015190505b61387685826137fb565b8655506138dd565b601f19841661388c86613679565b5f5b828110156138b35784890151825560018201915060208501945060208101905061388e565b868310156138d057848901516138cc601f8916826137df565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a207472616e736665722066726f6d20696e636f7272656374205f8201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b5f61393f60258361291d565b915061394a826138e5565b604082019050919050565b5f6020820190508181035f83015261396c81613933565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f6139cd60248361291d565b91506139d882613973565b604082019050919050565b5f6020820190508181035f8301526139fa816139c1565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c6572000000000000005f82015250565b5f613a3560198361291d565b9150613a4082613a01565b602082019050919050565b5f6020820190508181035f830152613a6281613a29565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e2045524337323152655f8201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b5f613ac360328361291d565b9150613ace82613a69565b604082019050919050565b5f6020820190508181035f830152613af081613ab7565b9050919050565b5f81905092915050565b5f613b0b82612913565b613b158185613af7565b9350613b2581856020860161292d565b80840191505092915050565b5f613b3c8285613b01565b9150613b488284613b01565b91508190509392505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000005f82015250565b5f613b88601783613af7565b9150613b9382613b54565b601782019050919050565b7f206973206d697373696e6720726f6c65200000000000000000000000000000005f82015250565b5f613bd2601183613af7565b9150613bdd82613b9e565b601182019050919050565b5f613bf282613b7c565b9150613bfe8285613b01565b9150613c0982613bc6565b9150613c158284613b01565b91508190509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81519050919050565b5f82825260208201905092915050565b5f613c7282613c4e565b613c7c8185613c58565b9350613c8c81856020860161292d565b613c9581612955565b840191505092915050565b5f608082019050613cb35f830187612a4b565b613cc06020830186612a4b565b613ccd6040830185612da0565b8181036060830152613cdf8184613c68565b905095945050505050565b5f81519050613cf88161288b565b92915050565b5f60208284031215613d1357613d12612858565b5b5f613d2084828501613cea565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f20616464726573735f82015250565b5f613d5d60208361291d565b9150613d6882613d29565b602082019050919050565b5f6020820190508181035f830152613d8a81613d51565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e746564000000005f82015250565b5f613dc5601c8361291d565b9150613dd082613d91565b602082019050919050565b5f6020820190508181035f830152613df281613db9565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613e30826129bd565b9150613e3b836129bd565b9250828202613e49816129bd565b91508282048414831517613e6057613e5f613df9565b5b5092915050565b5f613e71826129bd565b9150613e7c836129bd565b9250828201905080821115613e9457613e93613df9565b5b92915050565b5f613ea4826129bd565b91505f8203613eb657613eb5613df9565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e745f82015250565b5f613ef560208361291d565b9150613f0082613ec1565b602082019050919050565b5f6020820190508181035f830152613f2281613ee9565b9050919050565b5f613f33826129bd565b9150613f3e836129bd565b9250828203905081811115613f5657613f55613df9565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffdfea26469706673582212204ee9db7b17dfbc7a664136bd2db21b98588002a50f87ffa3fca8d3fb4fb4378364736f6c63430008140033",
}

// ChecksABI is the input ABI used to generate the binding from.
// Deprecated: Use ChecksMetaData.ABI instead.
var ChecksABI = ChecksMetaData.ABI

// ChecksBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ChecksMetaData.Bin instead.
var ChecksBin = ChecksMetaData.Bin

// DeployChecks deploys a new Ethereum contract, binding an instance of Checks to it.
func DeployChecks(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Checks, error) {
	parsed, err := ChecksMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ChecksBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Checks{ChecksCaller: ChecksCaller{contract: contract}, ChecksTransactor: ChecksTransactor{contract: contract}, ChecksFilterer: ChecksFilterer{contract: contract}}, nil
}

// Checks is an auto generated Go binding around an Ethereum contract.
type Checks struct {
	ChecksCaller     // Read-only binding to the contract
	ChecksTransactor // Write-only binding to the contract
	ChecksFilterer   // Log filterer for contract events
}

// ChecksCaller is an auto generated read-only Go binding around an Ethereum contract.
type ChecksCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChecksTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ChecksTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChecksFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ChecksFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChecksSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ChecksSession struct {
	Contract     *Checks           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ChecksCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ChecksCallerSession struct {
	Contract *ChecksCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ChecksTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ChecksTransactorSession struct {
	Contract     *ChecksTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ChecksRaw is an auto generated low-level Go binding around an Ethereum contract.
type ChecksRaw struct {
	Contract *Checks // Generic contract binding to access the raw methods on
}

// ChecksCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ChecksCallerRaw struct {
	Contract *ChecksCaller // Generic read-only contract binding to access the raw methods on
}

// ChecksTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ChecksTransactorRaw struct {
	Contract *ChecksTransactor // Generic write-only contract binding to access the raw methods on
}

// NewChecks creates a new instance of Checks, bound to a specific deployed contract.
func NewChecks(address common.Address, backend bind.ContractBackend) (*Checks, error) {
	contract, err := bindChecks(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Checks{ChecksCaller: ChecksCaller{contract: contract}, ChecksTransactor: ChecksTransactor{contract: contract}, ChecksFilterer: ChecksFilterer{contract: contract}}, nil
}

// NewChecksCaller creates a new read-only instance of Checks, bound to a specific deployed contract.
func NewChecksCaller(address common.Address, caller bind.ContractCaller) (*ChecksCaller, error) {
	contract, err := bindChecks(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ChecksCaller{contract: contract}, nil
}

// NewChecksTransactor creates a new write-only instance of Checks, bound to a specific deployed contract.
func NewChecksTransactor(address common.Address, transactor bind.ContractTransactor) (*ChecksTransactor, error) {
	contract, err := bindChecks(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ChecksTransactor{contract: contract}, nil
}

// NewChecksFilterer creates a new log filterer instance of Checks, bound to a specific deployed contract.
func NewChecksFilterer(address common.Address, filterer bind.ContractFilterer) (*ChecksFilterer, error) {
	contract, err := bindChecks(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ChecksFilterer{contract: contract}, nil
}

// bindChecks binds a generic wrapper to an already deployed contract.
func bindChecks(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ChecksMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Checks *ChecksRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Checks.Contract.ChecksCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Checks *ChecksRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Checks.Contract.ChecksTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Checks *ChecksRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Checks.Contract.ChecksTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Checks *ChecksCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Checks.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Checks *ChecksTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Checks.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Checks *ChecksTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Checks.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Checks *ChecksCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Checks.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Checks *ChecksSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Checks.Contract.DEFAULTADMINROLE(&_Checks.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Checks *ChecksCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Checks.Contract.DEFAULTADMINROLE(&_Checks.CallOpts)
}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_Checks *ChecksCaller) MINTERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Checks.contract.Call(opts, &out, "MINTER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_Checks *ChecksSession) MINTERROLE() ([32]byte, error) {
	return _Checks.Contract.MINTERROLE(&_Checks.CallOpts)
}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_Checks *ChecksCallerSession) MINTERROLE() ([32]byte, error) {
	return _Checks.Contract.MINTERROLE(&_Checks.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Checks *ChecksCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Checks.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Checks *ChecksSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Checks.Contract.BalanceOf(&_Checks.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Checks *ChecksCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Checks.Contract.BalanceOf(&_Checks.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Checks *ChecksCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Checks.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Checks *ChecksSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Checks.Contract.GetApproved(&_Checks.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Checks *ChecksCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Checks.Contract.GetApproved(&_Checks.CallOpts, tokenId)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Checks *ChecksCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Checks.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Checks *ChecksSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Checks.Contract.GetRoleAdmin(&_Checks.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Checks *ChecksCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Checks.Contract.GetRoleAdmin(&_Checks.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Checks *ChecksCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Checks.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Checks *ChecksSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Checks.Contract.GetRoleMember(&_Checks.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Checks *ChecksCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Checks.Contract.GetRoleMember(&_Checks.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Checks *ChecksCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Checks.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Checks *ChecksSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Checks.Contract.GetRoleMemberCount(&_Checks.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Checks *ChecksCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Checks.Contract.GetRoleMemberCount(&_Checks.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Checks *ChecksCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Checks.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Checks *ChecksSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Checks.Contract.HasRole(&_Checks.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Checks *ChecksCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Checks.Contract.HasRole(&_Checks.CallOpts, role, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Checks *ChecksCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Checks.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Checks *ChecksSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Checks.Contract.IsApprovedForAll(&_Checks.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Checks *ChecksCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Checks.Contract.IsApprovedForAll(&_Checks.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Checks *ChecksCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Checks.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Checks *ChecksSession) Name() (string, error) {
	return _Checks.Contract.Name(&_Checks.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Checks *ChecksCallerSession) Name() (string, error) {
	return _Checks.Contract.Name(&_Checks.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Checks *ChecksCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Checks.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Checks *ChecksSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Checks.Contract.OwnerOf(&_Checks.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Checks *ChecksCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Checks.Contract.OwnerOf(&_Checks.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Checks *ChecksCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Checks.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Checks *ChecksSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Checks.Contract.SupportsInterface(&_Checks.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Checks *ChecksCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Checks.Contract.SupportsInterface(&_Checks.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Checks *ChecksCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Checks.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Checks *ChecksSession) Symbol() (string, error) {
	return _Checks.Contract.Symbol(&_Checks.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Checks *ChecksCallerSession) Symbol() (string, error) {
	return _Checks.Contract.Symbol(&_Checks.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Checks *ChecksCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Checks.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Checks *ChecksSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Checks.Contract.TokenURI(&_Checks.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Checks *ChecksCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Checks.Contract.TokenURI(&_Checks.CallOpts, tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0x10e6d746.
//
// Solidity: function _mint(address to, string uri) returns()
func (_Checks *ChecksTransactor) Mint(opts *bind.TransactOpts, to common.Address, uri string) (*types.Transaction, error) {
	return _Checks.contract.Transact(opts, "_mint", to, uri)
}

// Mint is a paid mutator transaction binding the contract method 0x10e6d746.
//
// Solidity: function _mint(address to, string uri) returns()
func (_Checks *ChecksSession) Mint(to common.Address, uri string) (*types.Transaction, error) {
	return _Checks.Contract.Mint(&_Checks.TransactOpts, to, uri)
}

// Mint is a paid mutator transaction binding the contract method 0x10e6d746.
//
// Solidity: function _mint(address to, string uri) returns()
func (_Checks *ChecksTransactorSession) Mint(to common.Address, uri string) (*types.Transaction, error) {
	return _Checks.Contract.Mint(&_Checks.TransactOpts, to, uri)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Checks *ChecksTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Checks.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Checks *ChecksSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Checks.Contract.Approve(&_Checks.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Checks *ChecksTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Checks.Contract.Approve(&_Checks.TransactOpts, to, tokenId)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Checks *ChecksTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Checks.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Checks *ChecksSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Checks.Contract.GrantRole(&_Checks.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Checks *ChecksTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Checks.Contract.GrantRole(&_Checks.TransactOpts, role, account)
}

// RemoveMinter is a paid mutator transaction binding the contract method 0x3092afd5.
//
// Solidity: function removeMinter(address account) returns()
func (_Checks *ChecksTransactor) RemoveMinter(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _Checks.contract.Transact(opts, "removeMinter", account)
}

// RemoveMinter is a paid mutator transaction binding the contract method 0x3092afd5.
//
// Solidity: function removeMinter(address account) returns()
func (_Checks *ChecksSession) RemoveMinter(account common.Address) (*types.Transaction, error) {
	return _Checks.Contract.RemoveMinter(&_Checks.TransactOpts, account)
}

// RemoveMinter is a paid mutator transaction binding the contract method 0x3092afd5.
//
// Solidity: function removeMinter(address account) returns()
func (_Checks *ChecksTransactorSession) RemoveMinter(account common.Address) (*types.Transaction, error) {
	return _Checks.Contract.RemoveMinter(&_Checks.TransactOpts, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Checks *ChecksTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Checks.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Checks *ChecksSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Checks.Contract.RenounceRole(&_Checks.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Checks *ChecksTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Checks.Contract.RenounceRole(&_Checks.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Checks *ChecksTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Checks.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Checks *ChecksSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Checks.Contract.RevokeRole(&_Checks.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Checks *ChecksTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Checks.Contract.RevokeRole(&_Checks.TransactOpts, role, account)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Checks *ChecksTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Checks.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Checks *ChecksSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Checks.Contract.SafeTransferFrom(&_Checks.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Checks *ChecksTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Checks.Contract.SafeTransferFrom(&_Checks.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Checks *ChecksTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Checks.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Checks *ChecksSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Checks.Contract.SafeTransferFrom0(&_Checks.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Checks *ChecksTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Checks.Contract.SafeTransferFrom0(&_Checks.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Checks *ChecksTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Checks.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Checks *ChecksSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Checks.Contract.SetApprovalForAll(&_Checks.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Checks *ChecksTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Checks.Contract.SetApprovalForAll(&_Checks.TransactOpts, operator, approved)
}

// SetMinter is a paid mutator transaction binding the contract method 0xfca3b5aa.
//
// Solidity: function setMinter(address account) returns()
func (_Checks *ChecksTransactor) SetMinter(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _Checks.contract.Transact(opts, "setMinter", account)
}

// SetMinter is a paid mutator transaction binding the contract method 0xfca3b5aa.
//
// Solidity: function setMinter(address account) returns()
func (_Checks *ChecksSession) SetMinter(account common.Address) (*types.Transaction, error) {
	return _Checks.Contract.SetMinter(&_Checks.TransactOpts, account)
}

// SetMinter is a paid mutator transaction binding the contract method 0xfca3b5aa.
//
// Solidity: function setMinter(address account) returns()
func (_Checks *ChecksTransactorSession) SetMinter(account common.Address) (*types.Transaction, error) {
	return _Checks.Contract.SetMinter(&_Checks.TransactOpts, account)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Checks *ChecksTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Checks.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Checks *ChecksSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Checks.Contract.TransferFrom(&_Checks.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Checks *ChecksTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Checks.Contract.TransferFrom(&_Checks.TransactOpts, from, to, tokenId)
}

// ChecksApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Checks contract.
type ChecksApprovalIterator struct {
	Event *ChecksApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChecksApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChecksApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChecksApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChecksApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChecksApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChecksApproval represents a Approval event raised by the Checks contract.
type ChecksApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Checks *ChecksFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ChecksApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Checks.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ChecksApprovalIterator{contract: _Checks.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Checks *ChecksFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ChecksApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Checks.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChecksApproval)
				if err := _Checks.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Checks *ChecksFilterer) ParseApproval(log types.Log) (*ChecksApproval, error) {
	event := new(ChecksApproval)
	if err := _Checks.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChecksApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Checks contract.
type ChecksApprovalForAllIterator struct {
	Event *ChecksApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChecksApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChecksApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChecksApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChecksApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChecksApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChecksApprovalForAll represents a ApprovalForAll event raised by the Checks contract.
type ChecksApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Checks *ChecksFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ChecksApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Checks.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ChecksApprovalForAllIterator{contract: _Checks.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Checks *ChecksFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ChecksApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Checks.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChecksApprovalForAll)
				if err := _Checks.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Checks *ChecksFilterer) ParseApprovalForAll(log types.Log) (*ChecksApprovalForAll, error) {
	event := new(ChecksApprovalForAll)
	if err := _Checks.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChecksRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the Checks contract.
type ChecksRoleAdminChangedIterator struct {
	Event *ChecksRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChecksRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChecksRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChecksRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChecksRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChecksRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChecksRoleAdminChanged represents a RoleAdminChanged event raised by the Checks contract.
type ChecksRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Checks *ChecksFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*ChecksRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Checks.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &ChecksRoleAdminChangedIterator{contract: _Checks.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Checks *ChecksFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *ChecksRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Checks.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChecksRoleAdminChanged)
				if err := _Checks.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Checks *ChecksFilterer) ParseRoleAdminChanged(log types.Log) (*ChecksRoleAdminChanged, error) {
	event := new(ChecksRoleAdminChanged)
	if err := _Checks.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChecksRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Checks contract.
type ChecksRoleGrantedIterator struct {
	Event *ChecksRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChecksRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChecksRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChecksRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChecksRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChecksRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChecksRoleGranted represents a RoleGranted event raised by the Checks contract.
type ChecksRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Checks *ChecksFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ChecksRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Checks.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ChecksRoleGrantedIterator{contract: _Checks.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Checks *ChecksFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *ChecksRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Checks.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChecksRoleGranted)
				if err := _Checks.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Checks *ChecksFilterer) ParseRoleGranted(log types.Log) (*ChecksRoleGranted, error) {
	event := new(ChecksRoleGranted)
	if err := _Checks.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChecksRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Checks contract.
type ChecksRoleRevokedIterator struct {
	Event *ChecksRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChecksRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChecksRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChecksRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChecksRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChecksRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChecksRoleRevoked represents a RoleRevoked event raised by the Checks contract.
type ChecksRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Checks *ChecksFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ChecksRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Checks.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ChecksRoleRevokedIterator{contract: _Checks.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Checks *ChecksFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *ChecksRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Checks.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChecksRoleRevoked)
				if err := _Checks.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Checks *ChecksFilterer) ParseRoleRevoked(log types.Log) (*ChecksRoleRevoked, error) {
	event := new(ChecksRoleRevoked)
	if err := _Checks.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChecksTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Checks contract.
type ChecksTransferIterator struct {
	Event *ChecksTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChecksTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChecksTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChecksTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChecksTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChecksTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChecksTransfer represents a Transfer event raised by the Checks contract.
type ChecksTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Checks *ChecksFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ChecksTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Checks.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ChecksTransferIterator{contract: _Checks.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Checks *ChecksFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ChecksTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Checks.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChecksTransfer)
				if err := _Checks.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Checks *ChecksFilterer) ParseTransfer(log types.Log) (*ChecksTransfer, error) {
	event := new(ChecksTransfer)
	if err := _Checks.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
